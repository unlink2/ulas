.\" Manpage for ulas.
.\" Contact lukas@krickl.dev to correct errors or typos.

.TH man 1 "21 August 2023" "0.0.1" "ulas manual"

.SH NAME
  ulas
.SH SYNOPSIS
  ulas [-hvV] 
.SH DESCRIPTION
  ulas

  -h                    
    display this help and exit
  -v                 
    display version info and exit
  -v, --verbose             
    verbose output
 
.SH PREPROCESSOR 

The preprocessor is a text based way of modifying the input before 
the assembly step. Stray tokens after a directive are ignored!

Preprocessor directives start with a # and have to be the first non-space character in a line.
All lines that are not a preprocessor directive, or are not part of a preprocessor block (macro, or if)
will be output as-is. If a line contains the name of a preprocessot define or macro 
,surrounded by token any character that is not alphanumeric or an underscore,
the define or macro will be expanded.

Withing preprocessor macros 
- $0 will expand to the literal argument string 
- $1 to $9 will expand to the comma separated arguments of the macro 
- $$ will insert a unique numeric literal 

Macros:

#macro my_macro
label$$:
  adc $1, $2
#endmacro

my_macro a, b

Define:

#define name value 
name ; will be replaced with 'value'
#undefine name

.SH ASSEMBLY SYNTAX



.SH EXPRESSION SYNTAX

Expressions are written in Reverse Polish Notation style and evaluated based on their expected data type.
For example when an expression expects an int type the expression will assume all values that are pushed to it 
are integers.

.SH ASSEMBLY DIRECTIVES 

During assembly sometimes it is required to set certain parameters of the assembler such as the base address (represented by the $@ symbol in expressions).

Valid directives:

  \.org <expression>  
    Sets the base address

.SH EXAMPLES
 
.SH SEE ALSO

.SH BUGS

.SH AUTHOR
  Lukas Krickl (lukas@krickl.dev)

.SH COPYRIGHT
  Copyright 2023 Lukas Krickl (lukas@krickl.dev)
